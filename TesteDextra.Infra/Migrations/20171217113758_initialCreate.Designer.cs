// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using TesteDextra.Infra.Context;

namespace TesteDextra.Infra.Migrations
{
    [DbContext(typeof(TesteDextraContext))]
    [Migration("20171217113758_initialCreate")]
    partial class initialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TesteDextra.Domain.Entities.Ingrediente", b =>
                {
                    b.Property<long>("IdIngrediente")
                        .HasColumnName("IdIngrediente")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome")
                        .HasColumnType("varchar(100)")
                        .IsUnicode(false);

                    b.Property<decimal>("Valor")
                        .HasColumnName("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdIngrediente");

                    b.ToTable("Ingrediente","dbo");
                });

            modelBuilder.Entity("TesteDextra.Domain.Entities.Lanche", b =>
                {
                    b.Property<long>("IdLanche")
                        .HasColumnName("IdLanche")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome")
                        .HasColumnType("varchar(100)")
                        .IsUnicode(false);

                    b.HasKey("IdLanche");

                    b.ToTable("Lanche","dbo");
                });

            modelBuilder.Entity("TesteDextra.Domain.Entities.LancheIngrediente", b =>
                {
                    b.Property<long>("IdLancheIngrediente")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdLancheIngrediente")
                        .HasColumnType("bigint");

                    b.Property<long>("IdIngrediente")
                        .HasColumnName("IdIngrediente")
                        .HasColumnType("bigint");

                    b.Property<long>("IdLanche")
                        .HasColumnName("IdLanche")
                        .HasColumnType("bigint");

                    b.HasKey("IdLancheIngrediente");

                    b.HasIndex("IdIngrediente");

                    b.HasIndex("IdLanche");

                    b.ToTable("LancheIngrediente","dbo");
                });

            modelBuilder.Entity("TesteDextra.Domain.Entities.Parametro", b =>
                {
                    b.Property<long>("IdParametro")
                        .HasColumnName("IdParametro")
                        .HasColumnType("bigint");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome")
                        .HasColumnType("varchar(50)")
                        .IsUnicode(false);

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnName("Valor")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.HasKey("IdParametro");

                    b.ToTable("Parametro","dbo");
                });

            modelBuilder.Entity("TesteDextra.Domain.Entities.Pedido", b =>
                {
                    b.Property<long>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdPedido")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DataPedido")
                        .HasColumnName("DataPedido")
                        .HasColumnType("datetime");

                    b.Property<int>("IdStatusPedido")
                        .HasColumnName("IdStatusPedido")
                        .HasColumnType("int");

                    b.Property<string>("NomeLanche")
                        .IsRequired()
                        .HasColumnName("NomeLanche")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NumeroPedido")
                        .HasColumnName("NumeroPedido")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorFinal")
                        .HasColumnName("ValorFinal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPedido");

                    b.HasIndex("IdStatusPedido");

                    b.ToTable("Pedido","dbo");
                });

            modelBuilder.Entity("TesteDextra.Domain.Entities.PedidoIngrediente", b =>
                {
                    b.Property<long>("IdPedidoIngrediente")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdPedidoIngrediente")
                        .HasColumnType("bigint");

                    b.Property<long>("IdIngrediente")
                        .HasColumnName("IdIngrediente")
                        .HasColumnType("bigint");

                    b.Property<long>("IdPedido")
                        .HasColumnName("IdPedido")
                        .HasColumnType("bigint");

                    b.HasKey("IdPedidoIngrediente");

                    b.HasIndex("IdIngrediente");

                    b.HasIndex("IdPedido");

                    b.ToTable("PedidoIngrediente","dbo");
                });

            modelBuilder.Entity("TesteDextra.Domain.Entities.StatusPedido", b =>
                {
                    b.Property<int>("IdStatusPedido")
                        .HasColumnName("IdStatusPedido")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("Descricao")
                        .HasColumnType("varchar(15)")
                        .IsUnicode(false);

                    b.Property<string>("Sigla")
                        .IsRequired()
                        .HasColumnName("Sigla")
                        .HasColumnType("varchar(3)")
                        .IsUnicode(false);

                    b.HasKey("IdStatusPedido");

                    b.ToTable("StatusPedido","dbo");
                });

            modelBuilder.Entity("TesteDextra.Domain.Entities.TipoPromocao", b =>
                {
                    b.Property<long>("IdTipoPromocao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IdTipoPromocao")
                        .HasColumnType("bigint");

                    b.Property<string>("Descricao")
                        .HasColumnName("Descricao")
                        .HasColumnType("varchar(255)")
                        .IsUnicode(false);

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("Nome")
                        .HasColumnType("varchar(30)")
                        .IsUnicode(false);

                    b.HasKey("IdTipoPromocao");

                    b.ToTable("TipoPromocao","dbo");
                });

            modelBuilder.Entity("TesteDextra.Domain.Entities.LancheIngrediente", b =>
                {
                    b.HasOne("TesteDextra.Domain.Entities.Ingrediente", "Ingrediente")
                        .WithMany("LancheIngredientes")
                        .HasForeignKey("IdIngrediente")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TesteDextra.Domain.Entities.Lanche", "Lanche")
                        .WithMany("LancheIngredientes")
                        .HasForeignKey("IdLanche")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TesteDextra.Domain.Entities.Pedido", b =>
                {
                    b.HasOne("TesteDextra.Domain.Entities.StatusPedido", "StatusPedido")
                        .WithMany("Pedidoes")
                        .HasForeignKey("IdStatusPedido")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("TesteDextra.Domain.Entities.PedidoIngrediente", b =>
                {
                    b.HasOne("TesteDextra.Domain.Entities.Ingrediente", "Ingrediente")
                        .WithMany("PedidoIngredientes")
                        .HasForeignKey("IdIngrediente")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("TesteDextra.Domain.Entities.Pedido", "Pedido")
                        .WithMany("PedidoIngredientes")
                        .HasForeignKey("IdPedido")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
